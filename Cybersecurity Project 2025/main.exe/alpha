# Tree structure
tree = {
    'A': ['B', 'C'],
    'B': [3, 5],
    'C': [6, 9]
}

def minimax_alpha_beta(node, depth, alpha, beta, max_player):
    # If leaf node (int), just return it
    if isinstance(node, int):
        return node
    
    if max_player:  # Maximizer
        value = float('-inf')
        for child in tree[node]:
            value = max(value, minimax_alpha_beta(child, depth+1, alpha, beta, False))
            alpha = max(alpha, value)
            if alpha >= beta:  # Pruning
                print(f"Pruning branch at node {node}")
                break
        return value
    else:  # Minimizer
        value = float('inf')
        for child in tree[node]:
            value = min(value, minimax_alpha_beta(child, depth+1, alpha, beta, True))
            beta = min(beta, value)
            if beta <= alpha:  # Pruning
                print(f"Pruning branch at node {node}")
                break
        return value

# Run from root "A"
best_score = minimax_alpha_beta('A', 0, float('-inf'), float('inf'), True)
print(f"The best score is: {best_score}")
